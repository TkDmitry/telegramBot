import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from flask import Flask
from flask_cors import CORS 
from flask import jsonify 
from database import database  # Your existing database instance
import asyncio


from database import database  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

from books import books_bp
# Create the Flask app first
app = Flask(__name__)
CORS(app, origins=["http://localhost:3000", "https://tkdmitry.github.io"])

@app.errorhandler(500)
def internal_server_error(error):
    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
    response = jsonify({"error": "Internal Server Error"})
    response.status_code = 500

    # –í—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∏
    response.headers['Access-Control-Allow-Origin'] = 'http://localhost:3000'
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:
    # response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
    # response.headers['Access-Control-Allow-Headers'] = 'Content-Type'

    return response

# Import and register your blueprint
from books import books_bp
app.register_blueprint(books_bp)


TOKEN = "8348782064:AAHJVoZLD3lH63rzSJjoqcPNWlhcZqjUnLQ"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å parse_mode
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
    await database.create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å BookRandomCafe", web_app=WebAppInfo(url="https://tkdmitry.github.io/telegramBot"))],
            [InlineKeyboardButton(text="üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", web_app=WebAppInfo(url="https://tkdmitry.github.io/telegramBot/docs"))]
        ]
    )
    await message.answer("üß© –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BookRandomCafe! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:", reply_markup=markup)

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
# Add this to your main.py
@router.message(Command("add_book"))
async def add_book_handler(message: Message):
    # Example command: /add_book "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ" "–§.–ú. –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"
    try:
        # Simple parsing (you might want to make this more robust)
        parts = message.text.split('"')
        if len(parts) < 3:
            await message.answer('‚ùå Use: /add_book "Book Title" "Author"')
            return
            
        title = parts[1]
        author = parts[3]
        
        result = await database.add_user_book(
            user_id=message.from_user.id,
            book_title=title,
            author=author
        )
        
        if result:
            await message.answer(f"üìö Book '{result['book_title']}' was added to your library!")
        else:
            await message.answer("‚ùå Failed to add the book.")
            
    except Exception as e:
        await message.answer(f"‚ùå Error: {str(e)}")

# –î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
@router.message(Command("add_quote"))
async def add_quote_handler(message: Message):
    # /add_quote "–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã" "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏" "–≠–º–æ—Ü–∏—è"
    pass

@router.message(Command("my_quotes"))
async def my_quotes_handler(message: Message):
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pass

@router.message(Command("find_matches"))
async def find_matches_handler(message: Message):
    # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    matches = await database.find_matches(message.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

dp.include_router(router)

async def main():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await database.connect()
    
    try:
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await dp.start_polling(bot)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
        await database.close()

if __name__ == "__main__":
    asyncio.run(main())