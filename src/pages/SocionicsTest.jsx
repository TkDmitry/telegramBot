import React, { useState } from 'react';
import '../ui.css';

const questions = [
  {
    id: 1,
    text: "–ö–æ–≥–¥–∞ —Ç—ã –∑–Ω–∞–∫–æ–º–∏—à—å—Å—è —Å –Ω–æ–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, —á—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ?",
    options: [
      { value: "logic", label: "–ü–æ–Ω—è—Ç—å –µ–≥–æ –≤–∑–≥–ª—è–¥—ã –∏ –∏–¥–µ–∏" },
      { value: "ethics", label: "–ü–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —ç–º–æ—Ü–∏–∏" }
    ]
  },
  {
    id: 2,
    text: "–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è?",
    options: [
      { value: "intuition", label: "–û–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏" },
      { value: "sensing", label: "–û–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ —Ñ–∞–∫—Ç—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏" }
    ]
  },
  {
    id: 3,
    text: "–ß—Ç–æ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ?",
    options: [
      { value: "extravert", label: "–ë—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–±—ã—Ç–∏–π" },
      { value: "introvert", label: "–°–æ—Ö—Ä–∞–Ω—è—Ç—å —É–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–æ–∫—É—Å" }
    ]
  }
];

function SocionicsTest() {
  const [current, setCurrent] = useState(0);
  const [answers, setAnswers] = useState({});
  const [result, setResult] = useState(null);

  const handleAnswer = (value) => {
    setAnswers(prev => ({ ...prev, [questions[current].id]: value }));
    if (current + 1 < questions.length) {
      setCurrent(current + 1);
    } else {
      calculateResult();
    }
  };

  const calculateResult = () => {
    // –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞: —Å—á–∏—Ç–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –æ—Ç–≤–µ—Ç—É
    const first = answers[1];
    let type = "‚Äî";
    let description = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏.";
    if (first === "logic") {
      type = "–õ–æ–≥–∏–∫–æ‚Äë–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç (–î–æ–Ω –ö–∏—Ö–æ—Ç)";
      description = "–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –∏—â–µ—Ç –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.";
    } else if (first === "ethics") {
      type = "–≠—Ç–∏–∫–æ‚Äë—Å–µ–Ω—Å–æ—Ä–Ω—ã–π –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç (–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π)";
      description = "–≠–º–ø–∞—Ç–∏—á–Ω—ã–π, —Ü–µ–Ω–∏—Ç –≥–∞—Ä–º–æ–Ω–∏—é –∏ –≥–ª—É–±–æ–∫–∏–µ —Å–≤—è–∑–∏.";
    }
    setResult({ type, description });
  };

  const progress = Math.round(((current) / questions.length) * 100);

  return (
    <div className="page main">
      {!result ? (
        <section className="card">
          <h2>üß© –°–æ—Ü–∏–æ–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç</h2>
          <div className="progress-bar">
            <div className="progress" style={{ width: `${progress}%` }}></div>
          </div>
          <p>{questions[current].text}</p>
          <div className="options">
            {questions[current].options.map(opt => (
              <button
                key={opt.value}
                className="btn btn-secondary"
                onClick={() => handleAnswer(opt.value)}
              >
                {opt.label}
              </button>
            ))}
          </div>
        </section>
      ) : (
        <section className="card">
          <h2>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h2>
          <p><strong>{result.type}</strong></p>
          <p className="text-secondary">{result.description}</p>
        </section>
      )}
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <NavBar active="socionics" />
    </div>
  );
}

export default SocionicsTest;
